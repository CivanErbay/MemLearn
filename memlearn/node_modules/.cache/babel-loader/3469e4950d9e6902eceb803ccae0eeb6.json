{"ast":null,"code":"var _jsxFileName = \"/Users/navic/Desktop/neueFische/Week6/MemLearnFriday/memlearn/src/components/Game.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport SimpleCard from \"./SimpleCard\";\nimport { fetchVocabs } from \"../utils/api\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    padding: theme.spacing(10)\n  }\n}));\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [vocabs, setVocabs] = useState([]);\n\n  const handleFlip = id => {\n    const updatedVocabs = vocabs.map(vocab => {\n      if (vocab.id === id) {\n        vocab.flipState = !vocab.flipState;\n      }\n\n      return vocab;\n    });\n    setVocabs(updatedVocabs);\n  };\n\n  useEffect(async () => {\n    //fetchVocabs in Kombination mit useEffect zieht sich alle Daten beim ersten Rendern\n    let vocabs = await fetchVocabs();\n    vocabs = vocabs.map(v => {\n      return { ...v,\n        flipState: false\n      };\n    });\n    setVocabs(vocabs);\n  }, []);\n  useEffect(() => {\n    for (let i = 0; i < vocabs.length; i++) {\n      for (let j = 0; j < vocabs.length; j++) {\n        if (vocabs[i].flipState === vocabs[j].flipState && vocabs[i].message === vocabs[j].message) {\n          console.log(\"Oh yeah\");\n        }\n      }\n    }\n  }, [vocabs]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, vocabs.map(vocab => /*#__PURE__*/React.createElement(SimpleCard, {\n    vocab: vocab,\n    handleFlip: handleFlip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 42\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/navic/Desktop/neueFische/Week6/MemLearnFriday/memlearn/src/components/Game.jsx"],"names":["React","useEffect","useState","makeStyles","Grid","SimpleCard","fetchVocabs","useStyles","theme","root","flexGrow","display","alignItems","justifyContent","flexDirection","padding","spacing","CenteredGrid","classes","vocabs","setVocabs","handleFlip","id","updatedVocabs","map","vocab","flipState","v","i","length","j","message","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,WAAR,QAA0B,cAA1B;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,CADR;AAEFC,IAAAA,OAAO,EAAE,MAFP;AAGFC,IAAAA,UAAU,EAAE,QAHV;AAIFC,IAAAA,cAAc,EAAE,QAJd;AAKFC,IAAAA,aAAa,EAAE,KALb;AAMFC,IAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,EAAd;AANP;AAD+B,CAAZ,CAAD,CAA5B;AAaA,eAAe,SAASC,YAAT,GAAwB;AACnC,QAAMC,OAAO,GAAGX,SAAS,EAAzB;AAEA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMmB,UAAU,GAAGC,EAAE,IAAI;AACrB,UAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAP,CAAWC,KAAK,IAAI;AACtC,UAAIA,KAAK,CAACH,EAAN,KAAaA,EAAjB,EACA;AAACG,QAAAA,KAAK,CAACC,SAAN,GAAkB,CAACD,KAAK,CAACC,SAAzB;AAAmC;;AACpC,aAAOD,KAAP;AACH,KAJqB,CAAtB;AAKAL,IAAAA,SAAS,CAACG,aAAD,CAAT;AACH,GAPD;;AAUAtB,EAAAA,SAAS,CAAC,YAAY;AAAG;AACrB,QAAIkB,MAAM,GAAG,MAAMb,WAAW,EAA9B;AACAa,IAAAA,MAAM,GAAGA,MAAM,CAACK,GAAP,CAAWG,CAAC,IAAI;AACrB,aAAO,EAAC,GAAGA,CAAJ;AAAOD,QAAAA,SAAS,EAAE;AAAlB,OAAP;AACH,KAFQ,CAAT;AAGAN,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GANQ,EAMP,EANO,CAAT;AAQAlB,EAAAA,SAAS,CAAC,MAAK;AACX,SAAI,IAAI2B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,MAAM,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,MAAM,CAACU,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,YAAGX,MAAM,CAACS,CAAD,CAAN,CAAUF,SAAV,KAAwBP,MAAM,CAACW,CAAD,CAAN,CAAUJ,SAAlC,IAA+CP,MAAM,CAACS,CAAD,CAAN,CAAUG,OAAV,KAAsBZ,MAAM,CAACW,CAAD,CAAN,CAAUC,OAAlF,EAA4F;AACxFC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;AACJ;AACJ;AACJ,GARQ,EAQL,CAACd,MAAD,CARK,CAAT;AAUA,sBACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACT,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIaU,MAAM,CAACK,GAAP,CAAWC,KAAK,iBAAI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEA,KAAnB;AAA0B,IAAA,UAAU,EAAEJ,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,CAJb,CADJ;AAWH","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport SimpleCard from \"./SimpleCard\";\nimport {fetchVocabs} from \"../utils/api\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        padding: theme.spacing(10),\n    },\n\n\n}));\n\nexport default function CenteredGrid() {\n    const classes = useStyles();\n\n    const [vocabs, setVocabs] = useState([])\n\n    const handleFlip = id => {\n        const updatedVocabs = vocabs.map(vocab => {\n            if (vocab.id === id)\n            {vocab.flipState = !vocab.flipState}\n            return vocab\n        })\n        setVocabs(updatedVocabs)\n    }\n\n\n    useEffect(async () => {  //fetchVocabs in Kombination mit useEffect zieht sich alle Daten beim ersten Rendern\n        let vocabs = await fetchVocabs()\n        vocabs = vocabs.map(v => {\n            return {...v, flipState: false}\n        })\n        setVocabs(vocabs)\n    },[])\n\n    useEffect(()=> {\n        for(let i = 0; i < vocabs.length; i++) {\n            for(let j = 0; j < vocabs.length; j++) {\n                if(vocabs[i].flipState === vocabs[j].flipState && vocabs[i].message === vocabs[j].message ) {\n                    console.log(\"Oh yeah\")\n                }\n            }\n        }\n    } , [vocabs])\n\n    return (\n        <div className={classes.root}>\n\n\n\n                    {vocabs.map(vocab => <SimpleCard vocab={vocab} handleFlip={handleFlip}/> )\n                    }\n\n\n        </div>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}