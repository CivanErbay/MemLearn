{"ast":null,"code":"var _jsxFileName = \"/Users/navic/Desktop/neueFische/Week6/MemLearnFriday/memlearn/src/components/Game.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SimpleCard from \"./SimpleCard\";\nimport { fetchVocabs } from \"../utils/api\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    padding: theme.spacing(10)\n  }\n}));\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [vocabs, setVocabs] = useState([]); //setze den useState mit den Daten aus fetchVocabs()\n  // die handleFlip Methode wird zwar hier im Parent-Element definiert (Game.jsx) wird aber im Child-Element aufgerufen (SimpleCard.jsx)\n\n  const handleFlip = id => {\n    //Je nachdem welche Karte aufgerufen wird, wird die id vergeben (da jede Karte eine eindeutige id aufweist)\n    const updatedVocabs = vocabs.map(vocab => {\n      // es wird über vocabs gemapped und nur die Karte, auf die man gedrückt hat wird der flipState verändert, mithilfe des id-Abgleichs\n      if (vocab.id === id) // der veränderte Wert wird als Array zurückgeben (aufgrund von .map()), d.h. der Array ist bis auf eine Stelle gleich\n        {\n          vocab.flipState = !vocab.flipState;\n        }\n\n      return vocab;\n    });\n    setVocabs(updatedVocabs); // der veränderte Array wird das neue vocabs durch Aufruf der setVocabs Methode\n  }; // diese useEffect wird ausgeführt vor dem Rendern und nur EINMALIG\n\n\n  useEffect(async () => {\n    //fetchVocabs in Kombination mit useEffect zieht sich alle Daten beim ersten Rendern\n    let vocabs = await fetchVocabs(); //speichert alles in vocabs\n\n    vocabs = vocabs.map(v => {\n      // mappt über jedes Element in vocabs\n      return { ...v,\n        flipState: false\n      }; // \"unwrapped\" jedes einzelne Element UND addet eine weitere Property: flipstate mit Initialwert false\n    });\n    setVocabs(vocabs); //ruft die Methode setVocabs von useState auf (zeile 23) und addet die gefetchten Daten (welche mit flipState erweitert wurden)\n  }, []); // [] läuft nur einmal beim Start/ersten Render\n  //diese useEffect-Methode wird ausgeführt, wenn vocabs verändert wird (vocabs wird eigentlich nur verändert, wenn handleFlip ausgeführt)\n\n  useEffect(() => {\n    //d.h. wenn handleFlip ausgeführt wird (in SimpleCard.jsx), dann wird immer auch dieser useEffect aufgerufen\n    for (let i = 0; i < vocabs.length; i++) {\n      //Loop 1\n      for (let j = i + 1; j < vocabs.length; j++) {\n        //Loop 2\n        if (vocabs[i].flipState === true && vocabs[j].flipState === true && vocabs[i].message === vocabs[j].message) {\n          console.log(\"Oh yes oh yes\"); //Wenn zwei Karten true sind (also nicht versteckt sind, bzw \"geöffnet wurden) und diese GLEICHZEITIG diesselbe message (Vergleichswert),\n          //dann gibt es ein match! und die Erfolgsmeldung \"Oh yes oh yes\" erfolgt in der Konsole! - MEMORY\n        }\n      }\n    }\n  }, [vocabs]); // benutzt diesen useEffect ausschließlich, wenn vocabs verändert werden.\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, vocabs.map(vocab => /*#__PURE__*/React.createElement(SimpleCard, {\n    vocab: vocab,\n    handleFlip: handleFlip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 42\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/navic/Desktop/neueFische/Week6/MemLearnFriday/memlearn/src/components/Game.jsx"],"names":["React","useEffect","useState","makeStyles","SimpleCard","fetchVocabs","useStyles","theme","root","flexGrow","display","alignItems","justifyContent","flexDirection","padding","spacing","CenteredGrid","classes","vocabs","setVocabs","handleFlip","id","updatedVocabs","map","vocab","flipState","v","i","length","j","message","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport SimpleCard from \"./SimpleCard\";\nimport {fetchVocabs} from \"../utils/api\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        padding: theme.spacing(10),\n    },\n\n\n}));\n\nexport default function CenteredGrid() {\n    const classes = useStyles();\n\n    const [vocabs, setVocabs] = useState([])  //setze den useState mit den Daten aus fetchVocabs()\n\n    // die handleFlip Methode wird zwar hier im Parent-Element definiert (Game.jsx) wird aber im Child-Element aufgerufen (SimpleCard.jsx)\n    const handleFlip = id => {      //Je nachdem welche Karte aufgerufen wird, wird die id vergeben (da jede Karte eine eindeutige id aufweist)\n        const updatedVocabs = vocabs.map(vocab => {  // es wird über vocabs gemapped und nur die Karte, auf die man gedrückt hat wird der flipState verändert, mithilfe des id-Abgleichs\n            if (vocab.id === id)                       // der veränderte Wert wird als Array zurückgeben (aufgrund von .map()), d.h. der Array ist bis auf eine Stelle gleich\n            {vocab.flipState = !vocab.flipState}\n            return vocab\n        })\n        setVocabs(updatedVocabs)                // der veränderte Array wird das neue vocabs durch Aufruf der setVocabs Methode\n    }\n\n    // diese useEffect wird ausgeführt vor dem Rendern und nur EINMALIG\n    useEffect(async () => {  //fetchVocabs in Kombination mit useEffect zieht sich alle Daten beim ersten Rendern\n        let vocabs = await fetchVocabs()    //speichert alles in vocabs\n        vocabs = vocabs.map(v => {          // mappt über jedes Element in vocabs\n            return {...v, flipState: false} // \"unwrapped\" jedes einzelne Element UND addet eine weitere Property: flipstate mit Initialwert false\n        })\n        setVocabs(vocabs)                   //ruft die Methode setVocabs von useState auf (zeile 23) und addet die gefetchten Daten (welche mit flipState erweitert wurden)\n    },[])                             // [] läuft nur einmal beim Start/ersten Render\n\n\n    //diese useEffect-Methode wird ausgeführt, wenn vocabs verändert wird (vocabs wird eigentlich nur verändert, wenn handleFlip ausgeführt)\n    useEffect(()=> {     //d.h. wenn handleFlip ausgeführt wird (in SimpleCard.jsx), dann wird immer auch dieser useEffect aufgerufen\n        for(let i = 0; i < vocabs.length; i++) {        //Loop 1\n            for(let j = i+1; j < vocabs.length; j++) {  //Loop 2\n                if(vocabs[i].flipState === true && vocabs[j].flipState === true &&  vocabs[i].message === vocabs[j].message ) {\n                    console.log(\"Oh yes oh yes\") //Wenn zwei Karten true sind (also nicht versteckt sind, bzw \"geöffnet wurden) und diese GLEICHZEITIG diesselbe message (Vergleichswert),\n                    //dann gibt es ein match! und die Erfolgsmeldung \"Oh yes oh yes\" erfolgt in der Konsole! - MEMORY\n                }\n            }\n        }\n    } , [vocabs])    // benutzt diesen useEffect ausschließlich, wenn vocabs verändert werden.\n\n    return (\n        <div className={classes.root}>\n\n            <Grid container spacing={3}>\n\n                    {vocabs.map(vocab => <SimpleCard vocab={vocab} handleFlip={handleFlip}/> )\n                    }\n            </Grid>\n\n        </div>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}